WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:06.525
生成对抗网络中的对抗一词表示两个网络

00:00:06.525 --> 00:00:08.804
也就是生成器和判别器

00:00:08.804 --> 00:00:11.390
相互竞争

00:00:11.390 --> 00:00:14.515
为了从数学角度更好地理解这种竞争

00:00:14.515 --> 00:00:16.570
我们依靠博弈论

00:00:16.570 --> 00:00:20.320
博弈论是应用数学的分支

00:00:20.320 --> 00:00:25.239
由冯·诺依曼 (John Von Neumann) 创建 随后经由约翰·纳什 (John Nash) 得以极大发展

00:00:25.239 --> 00:00:28.000
博弈论可以用于模拟在任何情境下

00:00:28.000 --> 00:00:31.690
理性主体的合作与对抗

00:00:31.690 --> 00:00:34.990
其中 每个主体都可以从一系列行为中做出选择

00:00:34.990 --> 00:00:39.210
行为的选择决定了每个参与者界限清晰的结果

00:00:39.210 --> 00:00:40.689
我们以石头

00:00:40.689 --> 00:00:43.145
剪刀 布这个游戏为例

00:00:43.145 --> 00:00:47.189
每个参与者都可以选择石头 剪刀或布

00:00:47.189 --> 00:00:50.020
这就决定了一系列可能的动作

00:00:50.020 --> 00:00:52.450
每个参与者也都有个结果

00:00:52.450 --> 00:00:54.549
假如说获胜的参与者得到的结果是 1

00:00:54.549 --> 00:00:58.164
失败的参与者得到的结果是 -1

00:00:58.164 --> 00:01:03.250
石头打败剪刀 剪刀打败布 布打败石头

00:01:03.250 --> 00:01:07.780
如果两个参与者都采用相同的行动 就会不分胜负

00:01:07.780 --> 00:01:10.375
他们都会得到结果 0

00:01:10.375 --> 00:01:15.356
假设第一个参与者总是选择剪刀 第二个参与者总是选择石头

00:01:15.356 --> 00:01:19.341
那么第一个总是失败 得到的结果是 -1

00:01:19.341 --> 00:01:23.229
这说明第一个参与者可能会改变策略 进行改进

00:01:23.229 --> 00:01:26.515
例如经常选择布

00:01:26.515 --> 00:01:31.594
如果经过几次游戏 我们适应了每个参与者的策略后会发生什么呢？

00:01:31.594 --> 00:01:34.125
如果参与者可以随机选择他们的行动

00:01:34.125 --> 00:01:37.200
他们最终会达到一种均衡状态

00:01:37.200 --> 00:01:41.085
此时每个参与者都会一致地随机选择自己的行动

00:01:41.085 --> 00:01:44.010
在博弈论中 均衡是一个非常重要的情景

00:01:44.010 --> 00:01:49.004
其中两个参与者都无法通过改变自己的策略改进结果

00:01:49.004 --> 00:01:51.780
前提是另一个人的策略维持不变

00:01:51.780 --> 00:01:53.549
在石头 剪刀 布例子中

00:01:53.549 --> 00:01:56.879
我们来观察第一个参与者的选择

00:01:56.879 --> 00:01:59.040
假设第二个参与者一直随机选择石头

00:01:59.040 --> 00:02:02.385
剪刀或布

00:02:02.385 --> 00:02:07.439
我们考虑下 如果第一个参与者增加选择石头的次数

00:02:07.439 --> 00:02:11.099
第二个参与者选择石头也有三分之一的次数

00:02:11.099 --> 00:02:14.389
如果结果不分胜负 两个人都不得分

00:02:14.389 --> 00:02:17.400
第二个参与者选择布是三分之一的次数

00:02:17.400 --> 00:02:19.824
第一个参与者增加选择石头的次数

00:02:19.824 --> 00:02:23.370
会导致他失败

00:02:23.370 --> 00:02:27.449
最后第二个参与者选择剪刀是三分之一的次数

00:02:27.449 --> 00:02:30.629
那么第一个参与者额外选择石头的次数会让他获胜

00:02:30.629 --> 00:02:34.775
抵消他之前的失败

00:02:34.775 --> 00:02:38.604
总之 第一个参与者改变策略后一无所获

00:02:38.604 --> 00:02:40.650
由于结果具有对称性 如果我们考虑第二个参与者

00:02:40.650 --> 00:02:43.719
也会得到相同的参数值

00:02:43.719 --> 00:02:47.550
在这种均衡状态下 两个参与者一致随机地选择自己的行为

00:02:47.550 --> 00:02:52.759
是定义石头 剪刀 布游戏的重要特征

00:02:52.759 --> 00:02:55.319
我们分析这个游戏 总结出

00:02:55.319 --> 00:02:58.680
理性主体学会完全随机玩游戏

00:02:58.680 --> 00:03:01.379
为了理解生成对抗网络 我们需要思考

00:03:01.379 --> 00:03:05.039
机器学习背景下结果和均衡的原理

00:03:05.039 --> 00:03:07.860
如果我们可以指定生成对抗网络中的一个均衡状态

00:03:07.860 --> 00:03:12.919
我们使用这种均衡作为定义特征 来理解这个游戏

00:03:12.919 --> 00:03:17.754
目前为止 我们见到的大多数机器学习模型都是基于最优化

00:03:17.754 --> 00:03:19.530
我们写出一些模型参数

00:03:19.530 --> 00:03:22.139
写出一些参数的代价函数

00:03:22.139 --> 00:03:24.365
然后最小化成本

00:03:24.365 --> 00:03:28.849
在这个图形中 我们使用两个水平轴表示参数

00:03:28.849 --> 00:03:31.979
代价函数沿着纵轴缓慢行进

00:03:31.979 --> 00:03:36.590
学习算法的目的在于找到代价函数的极小值

00:03:36.590 --> 00:03:41.210
通常我们无法找到这种全局最小值 甚至无法找到局部最小值

00:03:41.210 --> 00:03:43.439
我们会陷入困惑中

00:03:43.439 --> 00:03:45.920
数值问题让它很难继续下降

00:03:45.920 --> 00:03:47.789
不过优化算法

00:03:47.789 --> 00:03:51.629
在寻找最小成本的点方面可以做的不错

00:03:51.629 --> 00:03:55.271
生成对抗网络有所不同 因为现在有两个不同的参与者

00:03:55.271 --> 00:03:57.900
生成器 (generator) 和判别器(discriminator)

00:03:57.900 --> 00:04:00.180
每个参与者都有自己的成本

00:04:00.180 --> 00:04:04.202
在生成对抗网络易于可视化的版本中

00:04:04.202 --> 00:04:09.710
判别器的成本是生成器代价的负数形式

00:04:09.710 --> 00:04:14.569
在这个简单的例子中 我们使用价值函数描述整个博弈

00:04:14.569 --> 00:04:16.160
生成器想要最小化

00:04:16.160 --> 00:04:21.379
价值函数 而判别器想要最大化价值函数

00:04:21.379 --> 00:04:24.949
回想之前我们说过

00:04:24.949 --> 00:04:30.435
如果不改变对方策略 两个参与者都无法改进情况时会出现均衡状态

00:04:30.435 --> 00:04:32.569
当我们处于判别器的最大值

00:04:32.569 --> 00:04:35.240
生成器的最小值时 会出现均衡状态

00:04:35.240 --> 00:04:38.430
这个点叫做鞍点(saddle point)

00:04:38.430 --> 00:04:42.389
这里你可以发现绘制的博弈在中间有个均衡状态

00:04:42.389 --> 00:04:46.985
其中一个横轴对应生成器的参数

00:04:46.985 --> 00:04:48.579
我们利用生成器参数对应的

00:04:48.579 --> 00:04:51.879
一个横轴上的截面

00:04:51.879 --> 00:04:55.400
均衡状态看起来像是价值函数的最小值

00:04:55.400 --> 00:04:57.675
另一个横轴

00:04:57.675 --> 00:04:59.670
垂直于第一个

00:04:59.670 --> 00:05:02.785
代表判别器的参数

00:05:02.785 --> 00:05:05.444
我们利用这个轴的截面

00:05:05.444 --> 00:05:09.689
均衡状态看起来像是价值函数的最大值

00:05:09.689 --> 00:05:13.415
这给我们提供了理解深层网络之间“游戏”的好方式

00:05:13.415 --> 00:05:17.170
我们想要找到两个参与者参数空间上的一个点

00:05:17.170 --> 00:05:19.120
可以同时是某个参与者参数

00:05:19.120 --> 00:05:23.129
每个参与者代价的局部最小值

00:05:23.129 --> 00:05:25.569
如果我们分析生成对抗网络的游戏

00:05:25.569 --> 00:05:29.829
判别器准确预测输入为真的概率时

00:05:29.829 --> 00:05:35.329
会出现判别器的局部最大值

00:05:35.329 --> 00:05:40.209
输入的数据密集度 数据密集度和输入生成器形成的模型密集度之和

00:05:40.209 --> 00:05:42.610
两者之间的比率

00:05:42.610 --> 00:05:46.360
得到这个概率

00:05:46.360 --> 00:05:49.629
我们可以把这个比率看做概率在某个区域的质量

00:05:49.629 --> 00:05:53.694
多少来自于数据 而不是生成器

00:05:53.694 --> 00:05:57.129
如果我们使用博弈论提供的数学手段

00:05:57.129 --> 00:06:00.235
我们会发现 如果两个网络足够大

00:06:00.235 --> 00:06:02.019
就会出现一种均衡

00:06:02.019 --> 00:06:05.605
其中生成器密度等于真正的数据密度

00:06:05.605 --> 00:06:08.579
判别器输出一半的数据

00:06:08.579 --> 00:06:12.310
不幸的是 即使存在均衡

00:06:12.310 --> 00:06:14.464
我们可能无法找到它

00:06:14.464 --> 00:06:18.879
我们同时使用两个优化算法 对参与者参数对应的代价进行最小化

00:06:18.879 --> 00:06:23.829
训练生成对抗网络

00:06:23.829 --> 00:06:27.055
不幸的是 这些优化算法

00:06:27.055 --> 00:06:30.235
不一定能找到博弈的均衡状态

00:06:30.235 --> 00:06:35.709
生成对抗网络的常见失败案例是 数据包括多个集群时

00:06:35.709 --> 00:06:38.750
生成器学习生成一个集群

00:06:38.750 --> 00:06:43.740
判别器学习拒绝虚假的集群

00:06:43.740 --> 00:06:47.319
生成器会学习生成一个不同集群 循环往复

00:06:47.319 --> 00:06:50.600
我们会倾向于利用一种算法

00:06:50.600 --> 00:06:56.050
能够真正找到均衡 使生成器同时从所有集群中采样

00:06:56.050 --> 00:06:58.518
这是生成对抗网络的主要研究问题

00:06:58.518 --> 00:07:00.790
设计学习算法

00:07:00.790 --> 00:07:04.884
在包含高维度 持续性 非凸代价函数的

00:07:04.884 --> 00:07:07.990
博弈中找到均衡

00:07:07.990 --> 00:07:11.569
希望你能够想到解决方法

00:07:11.569 --> 00:07:16.000
解锁需要可靠学习算法的新应用

